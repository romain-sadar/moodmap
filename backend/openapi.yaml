openapi: 3.0.3
info:
  title: User Authentication and Mood API
  version: 1.0.0
  description: API endpoints for user authentication, mood management, and favorite places or activities.

paths:
  /auth/register/:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user_id:
                    type: string
                    format: uuid
        "400":
          description: Invalid input

  /auth/login/:
    post:
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "200":
          description: Login successful and JWT tokens returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserResponse'
                  tokens:
                    type: object
                    properties:
                      refresh:
                        type: string
                      access:
                        type: string
        "400":
          description: Invalid credentials or inactive user

  /profile/:
    patch:
      summary: Update the user profile
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Invalid input

  /mood/:
    get:
      summary: List all moods
      operationId: listMoods
      responses:
        "200":
          description: A list of moods
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/MoodResponse'
    post:
      summary: Create a new mood
      operationId: createMood
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoodRequest'
      responses:
        "201":
          description: Mood created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodResponse'
        "400":
          description: Invalid input

  /place/:
    get:
      summary: List all places with optional mood filtering
      operationId: listPlaces
      parameters:
        - name: moods[]
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: Filter places by mood labels (e.g., moods[]=Calm)
      responses:
        "200":
          description: A list of places
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaceResponse'

  /place/{id}/:
    get:
      summary: Retrieve a specific place
      operationId: retrievePlace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: moods[]
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: Filter places by mood labels (e.g., moods[]=Calm)
      responses:
        "200":
          description: A specific place
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        "404":
          description: Place not found


  /favourites/:
    get:
      summary: List all favourite places of the user
      operationId: listFavouritePlaces
      responses:
        "200":
          description: A list of favorite places grouped by categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: '#/components/schemas/PlaceResponse'

  /favourites/grouped-by-mood/:
    get:
      summary: Get favourite places and activities grouped by mood
      operationId: listFavouritesGroupedByMood
      responses:
        "200":
          description: List of favourite places and activities grouped by mood
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/FavouriteGroupedByMoodResponse'

components:
  schemas:
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        age:
          type: integer
          nullable: true
        gender:
          type: string
          enum: [M, F, O, N]
          nullable: true

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string

    MoodRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 50
          nullable: true

    MoodResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
          nullable: true

    PlaceRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        description:
          type: string
        category:
          type: string
          format: uuid
        photo:
          type: string
          format: uri

    PlaceResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        description:
          type: string
        category:
          $ref: '#/components/schemas/CategoryResponse'
        photo:
          type: string
          format: uri

    FavouriteGroupedByMoodResponse:
      type: object
      properties:
        mood:
          type: string
        places:
          type: array
          items:
            $ref: '#/components/schemas/PlaceResponse'
        activities:
          type: array
          items:
            $ref: '#/components/schemas/ActivityResponse'

    ActivityResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/ActivityCategoryResponse'

    ActivityCategoryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
        verbose_label:
          type: string
